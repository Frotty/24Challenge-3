package Round
import MapBounds
import MapConstants
import PlayerData
import Statistics
import Entity
import OEbuilder
import Builder
import Flag
import Income


public function newRound()
	clearStatistics()
	//clearArena()
	createBuilders()
	renewPlayers()
	startIncome()
	new Flag()

public function endRound(Team winner)
	destroy Flag.INSTANCE
	if showRoundStatistics(winner)
		// TODO end game
	else
		getTimer().start(10, function newRound)

	

function createBuilders()
	var count = 0
	for p in red_players
		p.builder = new Builder(createUnit(p.p, builderIDundead, TEAM_RED_RITUAL.polarOffset((count*(360/red_players.getSize())).asAngleDegrees(), 128), angle(0)))
		count++
	count = 0
	for p in green_players
		p.builder = new Builder(createUnit(p.p, builderIDorc, TEAM_GREEN_RITUAL.polarOffset((count*(360/green_players.getSize())).asAngleDegrees(), 128), angle(0)))
		count++
	
function renewPlayers()
	for p in allPlayers
		// initial income
		p.income = 0
		// initial resources
		p.p
			..setState(PLAYER_STATE_RESOURCE_GOLD, 100)
			..setState(PLAYER_STATE_RESOURCE_LUMBER, 0)
		// adjust camer
		let builder = p.builder
		PanCameraToTimedForPlayer(p.p, builder.pos.x, builder.pos.y, 0.)
		SelectUnitForPlayerSingle(builder.actor, p.p)
		
	
		
function clearItems()
	let e = GetEnumItem().getEntity()
	if  e != null
		destroy e
	else
		GetEnumItem().remove()
	
function clearArena()
	GroupEnumUnitsInRect(ENUM_GROUP, mapRect, null)
	for u in ENUM_GROUP
		if(u.getEntity() != null)
			destroy u.getEntity()
		else
			u.remove()
			
	EnumItemsInRect(mapRect, null, function clearItems)
		
	ENUM_GROUP.clear()