package OEmain
import OEbuilder
import SpawnData
import UnitObjEditing
import ObjectIds

// OEmain is where everything is put together



@compiletime function buildUnits()
	let spawnData = spawnData() 
	let orcBuilder = createBuilder(Race.Orc)
	let undeadBuilder = createBuilder(Race.Undead)
	var orcBuildings = ""
	var undeadBuildings = ""
	for sd in spawnData
		let orcUnit = createSpawnUnit(sd, Race.Orc)
		let orcBuilding = createSpawnProductionBuilding(sd, Race.Orc)
		let undeadUnit = createSpawnUnit(sd, Race.Undead)
		let undeadBuilding = createSpawnProductionBuilding(sd, Race.Undead)
		
		
		// upgrades:
		var upgradesOrc = ""
		var upgradesUndead = ""
		for sd2 in spawnData
			if sd2.upgradedFrom == sd
				if upgradesOrc != ""		
					upgradesOrc += ","
					upgradesUndead += ","
				upgradesOrc += idInteger2IdString(orcBuildingId(sd2.id))
				upgradesUndead += idInteger2IdString(undeadBuildingId(sd2.id))
		
		
		orcBuilding.setUpgradesTo(upgradesOrc)
		undeadBuilding.setUpgradesTo(upgradesUndead)
		
		// create the production building:
		
		if sd.upgradedFrom == null
			if orcBuildings != ""
				orcBuildings += ","
				undeadBuildings += ","
			orcBuildings += idInteger2IdString(orcBuildingId(sd.id))
			undeadBuildings += idInteger2IdString(undeadBuildingId(sd.id))
		
			
					
	
	orcBuilder.setStructuresBuilt(orcBuildings)
	undeadBuilder.setStructuresBuilt(undeadBuildings)
	
function createSpawnUnit(SpawnData sd, Race r) returns UnitDefinition
	UnitDefinition ud
	string name
	if r == Race.Undead
		ud = new UnitDefinition(undeadUnitId(sd.id), sd.baseUnitUndead)
		ud.setIconGameInterface(sd.iconUndead)
		ud.setRace("undead")
		name = sd.nameUndead
	else
		ud = new UnitDefinition(orcUnitId(sd.id), sd.baseUnitOrc)
		ud.setIconGameInterface(sd.iconOrc)
		ud.setRace("orc")
		name = sd.nameOrc
	
	ud.setName(name)
	ud.setTooltipBasic("Train " + name + " [" + sd.hotkey + "]")
	ud.setTooltipExtended(sd.getExtendedDescription())
	ud.setHotkey(sd.hotkey)
	
	ud.setGoldBountyAwardedBase(sd.goldCost div 10 - 1)
	ud.setGoldBountyAwardedNumberofDice(1)
	ud.setGoldBountyAwardedSidesperDie(1)
	
	// set as ward to hide the command-card
	ud.setUnitClassification("Ward")
	
	// no tech tech requirements
	ud.setRequirements("")
	
	
	// TODO further abilities
	if (sd.abilities == "")
		ud.setNormalAbilities("AInv")
	else	
		ud.setNormalAbilities("AInv,"+sd.abilities)
	
	ud.setHitPointsMaximumBase(sd.maxHP)
	ud.setManaMaximum(sd.maxMana)
	ud.setSpeedBase(sd.movespeed)
	ud.setSpeedMinimum(0)
	ud.setSpeedMaximum(sd.movespeed)
	
	// only attack 1
	ud.setAttacksEnabled(1)
	ud.setAttack1CooldownTime(sd.attackCooldown)
	ud.setAttack1DamageBase(sd.damageMin-1)
	ud.setAttack1DamageNumberofDice(1)
	ud.setAttack1DamageSidesperDie(1 + sd.damageMax - sd.damageMin)
	ud.setAttack1AttackType(sd.attackType.toObjectString())
	ud.setAttack1Range(sd.range)
			
	// armor
	ud.setDefenseType(sd.armorType.toObjectString())
	ud.setDefenseBase(sd.armor)
	ud.setGoldCost(0)
	ud.setFoodCost(0)
	ud.setLumberCost(0)
	ud.setBuildTime(sd.unitBuildTime)
	
	// do additional changes to the object
	sd.additionalChanges(ud, r)
	return ud
	
function createSpawnProductionBuilding(SpawnData sd, Race r) returns BuildingDefinition
	BuildingDefinition b
	string name
	if r == Race.Undead
		b = new BuildingDefinition(undeadBuildingId(sd.id), 'hhou') // based on farm
		b.setRace("undead")
		name = sd.nameUndead
		b.setIconGameInterface(sd.iconUndead)
		b.setModelFile(sd.productionBuildingModelUndead)
		b.setScalingValue(sd.productionBuildingScaleUndead)
		b.setUnitsTrained(idInteger2IdString(undeadUnitId(sd.id)))
	else
		b = new BuildingDefinition(orcBuildingId(sd.id), 'hhou') // based on farm
		b.setRace("orc") 
		name = sd.nameOrc
		b.setIconGameInterface(sd.iconOrc)
		b.setModelFile(sd.productionBuildingModelOrc)
		b.setScalingValue(sd.productionBuildingScaleOrc)
		b.setUnitsTrained(idInteger2IdString(orcUnitId(sd.id)))
	b.setName(name)
	b.setTooltipBasic("Build " + name + " [" + sd.hotkey + "]")
	b.setTooltipExtended(sd.getExtendedDescription())
	b.setHotkey(sd.hotkey)
	b.setGoldCost(sd.goldCost)
	b.setLumberCost(0)
	b.setFoodProduced(0)
	b.setRepairGoldCost(0)
	b.setRepairLumberCost(0)
	b.setBuildTime(2)
	
	
	return b