package SpawnData
import LinkedList
import HashMap
import UnitObjEditing
import initlater InitSpawns

// general class for storing the data of a spawned unit
// from this, the OE data is generated, but it can also be used ingame

/** a list of all the spawnData */
public LinkedList<SpawnData> spawnData
HashMap<int, SpawnData> unitIdToSpawnData

init
	spawnData = spawnData()
	unitIdToSpawnData = new HashMap<int, SpawnData>
	for s in spawnData
		unitIdToSpawnData.put(s.id, s)
		
public function unit.getSpawnData() returns SpawnData
	return getSpawnData(this.getTypeId())

public function getSpawnData(int unitId) returns SpawnData
	let firstLetter = unitId div (256*256*256)
	return unitIdToSpawnData.get(unitId + 256*256*256*('0' - firstLetter))
	
public function unit.isSpawnUnit() returns boolean
	let firstLetter = this.getTypeId() div (256*256*256)
	return firstLetter == 'a' or firstLetter == 'c'

public function orcUnitId(int baseId) returns int
	return baseId + 256*256*256*('a'-'0')

public function orcBuildingId(int baseId) returns int
	return baseId + 256*256*256*('b'-'0')
	
public function undeadUnitId(int baseId) returns int
	return baseId + 256*256*256*('c'-'0')
	
public function undeadBuildingId(int baseId) returns int
	return baseId + 256*256*256*('d'-'0')

public enum SpawnClass
	Attacker
	Defender
	
public enum ArmorType
	Normal
	Small
	Medium
	Large
	Fortified
	Hero
	Divine
	Unarmored
	
public enum AttackType
	Unknown
	Normal
	Pierce
	Siege
	Spells
	Chaos
	Magic
	Hero


public function ArmorType.toObjectString() returns string
	string result = "normal"
	switch this
		case Normal
			result = "normal"
		case Small
			result = "small"
		case Medium
			result = "medium"
		case Large
			result = "large"
		case Fortified
			result = "fort"
		case Hero
			result = "hero"
		case Divine
			result = "divine"
		case Unarmored
			result = "none"
	return result
	
public function AttackType.toObjectString() returns string
	string result = "unknown"
	switch this
		case Unknown
			result = "unknown"
		case Normal
			result = "normal"
		case Pierce
			result = "pierce"
		case Siege
			result = "siege"
		case Spells
			result = "spells"
		case Chaos
			result = "chaos"
		case Magic
			result = "magic"
		case Hero
			result = "hero"
	return result
	
public enum Race
	Undead
	Orc

public class SpawnData
	int id
	SpawnData upgradedFrom = null
	int baseUnitUndead
	int baseUnitOrc
	string nameUndead
	string nameOrc
	string description = "" // could also be split in undead and orc
	string iconOrc = "ReplaceableTextures\\CommandButtons\\BTNBerserkForTrolls.blp"
	string iconUndead = "ReplaceableTextures\\CommandButtons\\BTNBerserkForTrolls.blp"
	string hotkey = "X"
	int maxHP = 100
	int maxMana = 0
	real attackCooldown = 1.3
	int movespeed = 250
	int damageMin = 10
	int damageMax = 12
	AttackType attackType = Pierce
	ArmorType armorType = Normal
	int armor = 3
	SpawnClass spawnClass = Attacker
	string productionBuildingModelOrc = "buildings\\human\\Farm\\Farm.mdl"
	real productionBuildingScaleOrc = 0.7
	string productionBuildingModelUndead = "buildings\\human\\Farm\\Farm.mdl"
	real productionBuildingScaleUndead = 0.7
	int goldCost = 50
	int unitBuildTime = 50
	int range = 100
	string abilities = ""
	
	construct(int id, int baseUnitUndead, string nameUndead, int baseUnitOrc, string nameOrc)
		this.id = id
		this.baseUnitOrc = baseUnitOrc
		this.nameOrc = nameOrc
		this.baseUnitUndead = baseUnitUndead
		this.nameUndead = nameUndead

	/** override this callback if you want to change other fields of the unit */ 
	function additionalChanges(UnitDefinition _ud, Race _r)
		
	/** generate a nice description of this unit and its stats .... */
	function getExtendedDescription() returns string
		return "|cffeeeeee" + description + "|r\n\n"
			+ "Damage: " + I2S(damageMin) + " - " + I2S(damageMax) + "\n"
			+ "Cooldown: " + R2S(attackCooldown) + "\n"
			+ "HP: " + I2S(maxHP) + "\n"
			+ "Armor: " + I2S(armor) + "\n"
			+ "Attacktype: " + attackType.toObjectString() + "\n"
			+ "Armortype: " + armorType.toObjectString() + "\n"
			+ "Production time: " + I2S(unitBuildTime) + "\n"

	function getCompleteGoldCost() returns int
		int dep = 0
		if upgradedFrom != null
			dep = upgradedFrom.getCompleteGoldCost()
		return dep + goldCost


	

